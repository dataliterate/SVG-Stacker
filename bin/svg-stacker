#!/usr/bin/env node

var fs = require('fs')
  , path = require('path')
  , program = require('commander')
  , xml2js = require('xml2js')
  /* -- internal */
  , stack = []
  /* -- user */
  , sourceDir = path.normalize('./')
  , targetDir = null
  ;

program
  .version('0.0.3')
  .option('-D, --no-demo', 'disables creation of demo files')
  .option('-s, --source [./]', 'source directory: location of svg files [./]', './')
  .option('-t, --target [./stack]', 'target directory: location for stack.svg and demo files [SOURCE_DIR/stack]', null)
  .option('-h --huge', 'allows huge SVG files to be stacked')
  ;

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ svg-stacker');
  console.log('        reads from working directoy, creates stack.svg in ./stack')
  console.log('    $ svg-stacker -s SOURCE_DIR');
  console.log('        reads from SOURCE_DIR, creates stack.svg in SOURCE_DIR/stack')
  console.log('    $ svg-stacker -s SOURCE_DIR -t TARGET_DIR');
  console.log('        reads from SOURCE_DIR, creates stack.svg in TARGET_DIR')
  console.log('');
});

program.parse(process.argv);

function addToStack(file) {

  var id = path.basename(file, '.svg');
  var svgXml = fs.readFileSync(file, 'utf-8');
  var parser = new xml2js.Parser();
  var builder = new xml2js.Builder({headless: true, rootName: 'svg'});
  var options = {};

  if ( program.huge ) {
     options['huge'] = true;
  }
  
  parser.parseString(svgXml, function (err, result) {
    
    // manipulate svg
    result.svg.$.class = 'i';
    result.svg.$.id = id;
    delete result.svg.$['xmlns'];
    delete result.svg.$['xmlns:xlink'];
    
    stack.push({
       id: id,
       svg: builder.buildObject(result.svg),
       w: result.svg.$.width,
       h: result.svg.$.height
    });
  });
}

function outputSvg(cb) {

  var svg = [];
  svg.push('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">');

  // @Â see http://xn--dahlstrm-t4a.net/tmp/sharp-icons/svg-icon-target.svg
  svg.push('<style type="text/css">');
  svg.push('<![CDATA[');
  svg.push('.i { display: none; fill: #010101; }');
  svg.push('.i:target { display: block; }');
  svg.push(']]>');
  svg.push('</style>');

  // need to make same ids from different files unique
  stack.forEach(function(icon) {
    svg.push(icon.svg);
  });

  svg.push('</svg>');

  var svgText = svg.join("\n");

  var filename = targetDir + 'stack.svg';
  fs.writeFile(filename, svgText, function(err) {
    if (err) throw err;
    console.log("    SVG Stack saved: " + filename);
    cb();
  });

}


function readSourceDir(cb) {

  console.log("    Reading " + sourceDir);

  fs.readdir(sourceDir, function(err, list) {
    if (err) throw err;

    var i = 0;
    list.forEach(function(file) {
      if(path.extname(file) != '.svg') {
        return;
      }
      file = sourceDir + '/' + file;
      addToStack(file);
      i++;
    });
    if(i == 0) {
      console.log("    Error: no SVG Files found in " + sourceDir);
      console.log("");
      console.log("  Type: ");
      console.log("        svg-stacker --help");
      console.log("");
    } else {
      console.log("    " + stack.length + " items stacked");
      console.log("");
      cb();
    }
  });
}

function htmlEscape(str) {
    return String(str)
      .replace(/&/g, '&amp;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#39;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;');
}

function outputHTML(demo, name) {
  var html = [];
  html.push('<html><head><title>SVG Stack</title><style>body { font-family: Helvetica; background-color: #CCC; } table { width: 100%; text-align: left; }</style></head>');
  html.push('<body>');
  html.push('<h1>SVG Stack</h1>');
  html.push('<p>created with an early demo of https://github.com/preciousforever/svg-stacker</p>');
  html.push('<table>');
  html.push('<thead><tr>');
  html.push('<th>Name</th>');
  if(demo.object) {
    html.push('<th>Object</th>');
    html.push('<th>Code</th>');
  }
  if(demo.embed) {
    html.push('<th>Embed</th>');
    html.push('<th>Code</th>');
  }
  if(demo.iframe) {
    html.push('<th>IFrame</th>');
    html.push('<th>Code</th>');
  }
  if(demo.img) {
    html.push('<th>Image</th>');
    html.push('<th>Code</th>');
  }
  if(demo.background) {
    html.push('<th>Background</th>');
    html.push('<th>Code</th>');
  }
  html.push('</tr></thead>');
  html.push('<tbody>');
  stack.forEach(function(icon) {

    var url = 'stack.svg#' + icon.id;
    var code = '';
    html.push('<tr>');
    html.push('<td>' + icon.id + '</td>');

    if(demo.object) {
      code = '<object type="image/svg+xml" data="' + url + '" width="' + icon.w + '" height="' + icon.h + '"></object>';
      html.push('<td>' + code + '</td>');
      html.push('<td><textarea cols="40" rows="3">' + htmlEscape(code) + '</textarea></td>');
    }
    if(demo.embed) {
      code = '<embed src="' + url + '" type="image/svg+xml">';
      html.push('<td>' + code + '</td>');
      html.push('<td><textarea cols="40" rows="3">' + htmlEscape(code) + '</textarea></td>');
    }
    if(demo.iframe) {
      code = '<iframe src="' + url + '" width="' + icon.w + '" height="' + icon.h + '"></iframe>';
      html.push('<td>' + code + '</td>');
      html.push('<td><textarea cols="40" rows="3">' + htmlEscape(code) + '</textarea></td>');
    }
    if(demo.img || demo.jsfix) {
      code = '<img src="' + url + '" width="' + icon.w + '" height="' + icon.h + '">';
      html.push('<td>' + code + '</td>');
      html.push('<td><textarea cols="40" rows="3">' + htmlEscape(code) + '</textarea></td>');
    }
    if(demo.background || demo.jsfix) {
      code = '<div style="background: transparent url(' + url + ') no-repeat top left; width: ' + icon.w + '; height: ' + icon.h + ';"></div>'
      html.push('<td>' + code + '</td>');
      html.push('<td><textarea cols="40" rows="3">' + htmlEscape(code) + '</textarea></td>');
    }
    //html.push(icon.svg);
    html.push('</tr>');

  });
  html.push('</tbody>');
  html.push('</table>');

  if(demo.jsfix) {
    code = [];
    code.push('<script src="https://ajax.googleapis.com/ajax/libs/jquery/1.7.2/jquery.min.js"></script>');
    code.push('<script src="http://preciousforever.github.com/SVG-Stacker/fixsvgstack.jquery.js"></script>');
    code.push('<script>');
    code.push('(function($) {');
      code.push("\t" + '$(document).ready(function() {');
        code.push("\t\t" + "$('div').fixSVGStackBackground();");
        code.push("\t\t" + "$('img').fixSVGStack();");
      code.push("\t" + '});');
    code.push('})(jQuery);');
    code.push('</script>');
    var codeText = code.join("\n");
    html.push(codeText);
    html.push('<td><textarea cols="40" rows="3">' + htmlEscape(codeText) + '</textarea></td>');
  }

  html.push('</body>');
  html.push('</html>');

  var htmlText = html.join("\n");

  var filename = targetDir + 'stack-demo-' + name + '.html';
  fs.writeFileSync(filename, htmlText, 'utf-8');
  console.log("    HTML-Demo saved: " + filename);
  /*
  function(err) {
    if (err) throw err;
    console.log("    HTML-Demo saved: " + filename);
  });
 */
}

sourceDir = path.normalize(program.source + '/');

if(program.target !== null) {
  targetDir = path.normalize(program.target + '/');
}
if(targetDir === null) {
  targetDir = sourceDir + 'stack/';
}

// create target directory
if (!fs.existsSync(targetDir)) {
  fs.mkdirSync(targetDir);
}

console.log('');
console.log('  SVG Stacker');
console.log('  -----------');
console.log('');

readSourceDir(function() {

  outputSvg(function() {
    if(program.demo) {
      console.log('');
      outputHTML({background: true}, 'background');
      outputHTML({object: true}, 'object');
      outputHTML({embed: true}, 'embed');
      outputHTML({iframe: true}, 'iframe');
      outputHTML({img: true}, 'img');
      outputHTML({jsfix: true}, 'jsfix');
      outputHTML({object: true, embed: true, iframe: true, background: true, img: true}, 'all');
    }
    console.log('');
    console.log('  Done.');
    console.log('');
  });



});
